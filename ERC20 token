ragma solidity >=0.5.0 <0.9.0;

interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account ) external view rerturns (uint256);
    function transfer (address recipient,uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to,uint256 value);


}

contract ApnaToken is IERC20 {

    string public constant name ;
    string public constant symbol;
    uint public constant decimals;
    address public manager;

    
     event Approval(address indexed tokenOwner, addreess indexed spender, uint tokens);
     event Transfer(address indexed from, address indexed to,uint tokens);

     mapping(address => uint256) balances;

     mapping (address => mapping (address => uint256 )) allowed;

     uint256 totalSupply_;

     constructor(string memory _name, string memory _symbol, uint8 _decimal, uint256 _tsupply)  public {
         totalSupply_=_tsupply;
         balances[msg.sender] = totalSupply_;
         name=_name;
         symbol = _symbol;
         decimals = _decimal;
         manager=msg.sender;


     }
     function totalSupply () public override view returns (uint256)
     {
         return totalSupply_;

     }

     function balanceOf(address tokenOwner) public override view returns (uint256)
     {
         return balances[tokenOwner];

     }

     function transfer(address receiver, uint256 numTokens) public override returns (bool)
     {
         require(numTokens <= balances[msg.sender]);
         balances[msg.sender] -= numTokens;
         balances[receiver] += numTokens;
         emit Transfer(msg.sender, receiver, numTokens);
         return true;

     }

     function mint(uint256 _qty) public returns(uint256)
     {
        require(msg.sender== manager," you are no the manager so u cant mint new coins ");
         totalSupply_ += _qty;
         balances[msg.sender] += _qty;

         return totalSupply_;


     }

     function burn(uint256 _qty) public returns(uint256)
     {
        require(msg.sender== manager," you are no the manager so u cant burn coins ")
        require(balances[msg.sender] >= _qty);
         totalSupply_ -= _qty;
         balances[msg.sender] -= _qty;

         return totalSupply_;


     }

     function allowance(address _owner, address _spender) public view returns (uint256 remaining)
     {
         return allowed[_owner][_spender];

     }
     

     function approve(address _spender, uint256 _value) public returns (bool success)
     {
         allowed[msg.sender][_spender] = _value;
         emit ApprovaL(msg.sender,_spender, _value);
         return true;


     }     
     function transferFrom(address _from, address _to, uint 256 _value ) public returns (bool sucess)
     {
         uint256 allowance1 = allowed[_from][msg.sender];
         require (balances[_from] >= _value && allowance1 >=value);
         balances[_to] +=_value;
         balances[_from] -=_value;
         allowed[_from][msg.sender] -= _value;


         emit Transfer(_from ,_to, _value);
         return true;



     }
